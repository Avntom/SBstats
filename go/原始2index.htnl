<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>流量监控面板</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <style>
        :root {
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --primary-color: #4e73df;
            --success-color: #1cc88a;
            --info-color: #36b9cc;
            --warning-color: #f6c23e;
        }
        
        body {
            background-color: #f8f9fc;
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            padding-top: 20px;
            padding-bottom: 40px;
        }
        
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            margin-bottom: 24px;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid #e3e6f0;
            font-weight: 700;
            padding: 16px 20px;
            border-radius: 10px 10px 0 0 !important;
        }
        
        .stat-card {
            text-align: center;
            transition: transform 0.2s;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-icon {
            font-size: 2rem;
            margin-bottom: 12px;
        }
        
        .stat-number {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #5a5c69;
            text-transform: uppercase;
        }
        
        .table-container {
            overflow-x: auto;
        }
        
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        
        th {
            background-color: #f8f9fc;
            position: sticky;
            top: 0;
            font-weight: 700;
            padding: 12px 15px;
        }
        
        td {
            padding: 12px 15px;
            vertical-align: middle;
            border-bottom: 1px solid #e3e6f0;
        }
        
        tr:hover td {
            background-color: #f8f9ff;
        }
        
        .search-box {
            max-width: 300px;
        }
        
        .refresh-btn {
            cursor: pointer;
            transition: transform 0.5s;
        }
        
        .refresh-btn:hover {
            transform: rotate(180deg);
        }
        
        .spinner-border {
            width: 1.2rem;
            height: 1.2rem;
        }
        
        @media (max-width: 768px) {
            .stat-number {
                font-size: 1.5rem;
            }
            
            .card-header h5 {
                font-size: 1.1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0 text-gray-800">
                <i class="bi bi-speedometer2 me-2"></i>流量监控面板
            </h1>
            <div class="d-flex align-items-center">
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="autoRefresh" checked>
                    <label class="form-check-label" for="autoRefresh">自动刷新</label>
                </div>
                <button id="refreshBtn" class="btn btn-primary">
                    <i class="bi bi-arrow-clockwise"></i> 刷新数据
                </button>
            </div>
        </header>

        <!-- 流量统计卡片 -->
        <div class="row">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card stat-card border-left-primary">
                    <div class="card-body">
                        <div class="stat-icon text-primary">
                            <i class="bi bi-cloud-upload"></i>
                        </div>
                        <div class="stat-number text-primary" id="totalUpload">0</div>
                        <div class="stat-label">总上传流量</div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card stat-card border-left-success">
                    <div class="card-body">
                        <div class="stat-icon text-success">
                            <i class="bi bi-cloud-download"></i>
                        </div>
                        <div class="stat-number text-success" id="totalDownload">0</div>
                        <div class="stat-label">总下载流量</div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card stat-card border-left-info">
                    <div class="card-body">
                        <div class="stat-icon text-info">
                            <i class="bi bi-diagram-3"></i>
                        </div>
                        <div class="stat-number text-info" id="totalTraffic">0</div>
                        <div class="stat-label">总流量</div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card stat-card border-left-warning">
                    <div class="card-body">
                        <div class="stat-icon text-warning">
                            <i class="bi bi-people"></i>
                        </div>
                        <div class="stat-number text-warning" id="userCount">0</div>
                        <div class="stat-label">用户数量</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 用户流量表格 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="m-0"><i class="bi bi-people me-2"></i>用户流量</h5>
                <div class="d-flex">
                    <div class="input-group input-group-sm search-box">
                        <input type="text" class="form-control" placeholder="搜索用户..." id="userSearch">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-container">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>用户</th>
                                <th>上传流量</th>
                                <th>下载流量</th>
                                <th>总流量</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                            <!-- 用户数据将在这里动态生成 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- 出站流量表格 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="m-0"><i class="bi bi-box-arrow-up me-2"></i>出站流量</h5>
                <div class="d-flex">
                    <div class="input-group input-group-sm search-box">
                        <input type="text" class="form-control" placeholder="搜索出站..." id="outboundSearch">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-container">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>出站</th>
                                <th>上传流量</th>
                                <th>下载流量</th>
                                <th>总流量</th>
                            </tr>
                        </thead>
                        <tbody id="outboundTableBody">
                            <!-- 出站数据将在这里动态生成 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- 入站流量表格 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="m-0"><i class="bi bi-box-arrow-in-down me-2"></i>入站流量</h5>
                <div class="d-flex">
                    <div class="input-group input-group-sm search-box">
                        <input type="text" class="form-control" placeholder="搜索入站..." id="inboundSearch">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-container">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>入站</th>
                                <th>上传流量</th>
                                <th>下载流量</th>
                                <th>总流量</th>
                            </tr>
                        </thead>
                        <tbody id="inboundTableBody">
                            <!-- 入站数据将在这里动态生成 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 格式化流量数据显示为更易读的形式
        function formatTraffic(bytes) {
            if (bytes < 1024) {
                return bytes + ' B';
            } else if (bytes < 1024 * 1024) {
                return (bytes / 1024).toFixed(2) + ' KB';
            } else if (bytes < 1024 * 1024 * 1024) {
                return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
            } else {
                return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';
            }
        }

        // 解析原始数据并分类
        function processData(data) {
            const result = {
                users: {},
                outbounds: {},
                inbounds: {}
            };

            let totalUpload = 0;
            let totalDownload = 0;

            data.forEach(item => {
                const parts = item.name.split('>>>');
                const type = parts[0];
                const name = parts[1];
                const trafficType = parts[3]; // uplink 或 downlink

                if (type === 'usr') {
                    if (!result.users[name]) {
                        result.users[name] = { uplink: 0, downlink: 0 };
                    }
                    result.users[name][trafficType] = item.value;
                    
                    if (trafficType === 'uplink') totalUpload += item.value;
                    else totalDownload += item.value;
                } else if (type === 'outbound') {
                    if (!result.outbounds[name]) {
                        result.outbounds[name] = { uplink: 0, downlink: 0 };
                    }
                    result.outbounds[name][trafficType] = item.value;
                } else if (type === 'inbound') {
                    if (!result.inbounds[name]) {
                        result.inbounds[name] = { uplink: 0, downlink: 0 };
                    }
                    result.inbounds[name][trafficType] = item.value;
                    
                    if (trafficType === 'downlink') totalDownload += item.value;
                    else totalUpload += item.value;
                }
            });

            return {
                categorized: result,
                totals: {
                    upload: totalUpload,
                    download: totalDownload,
                    total: totalUpload + totalDownload
                }
            };
        }

        // 更新用户界面
        function updateUI(data) {
            const processed = processData(data);
            
            // 更新统计卡片
            document.getElementById('totalUpload').textContent = formatTraffic(processed.totals.upload);
            document.getElementById('totalDownload').textContent = formatTraffic(processed.totals.download);
            document.getElementById('totalTraffic').textContent = formatTraffic(processed.totals.total);
            document.getElementById('userCount').textContent = Object.keys(processed.categorized.users).length;
            
            // 更新用户表格
            const userTableBody = document.getElementById('userTableBody');
            userTableBody.innerHTML = '';
            
            for (const [user, traffic] of Object.entries(processed.categorized.users)) {
                const total = traffic.uplink + traffic.downlink;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user}</td>
                    <td>${formatTraffic(traffic.uplink)}</td>
                    <td>${formatTraffic(traffic.downlink)}</td>
                    <td>${formatTraffic(total)}</td>
                `;
                userTableBody.appendChild(row);
            }
            
            // 更新出站表格
            const outboundTableBody = document.getElementById('outboundTableBody');
            outboundTableBody.innerHTML = '';
            
            for (const [outbound, traffic] of Object.entries(processed.categorized.outbounds)) {
                const total = traffic.uplink + traffic.downlink;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${outbound}</td>
                    <td>${formatTraffic(traffic.uplink)}</td>
                    <td>${formatTraffic(traffic.downlink)}</td>
                    <td>${formatTraffic(total)}</td>
                `;
                outboundTableBody.appendChild(row);
            }
            
            // 更新入站表格
            const inboundTableBody = document.getElementById('inboundTableBody');
            inboundTableBody.innerHTML = '';
            
            for (const [inbound, traffic] of Object.entries(processed.categorized.inbounds)) {
                const total = traffic.uplink + traffic.downlink;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${inbound}</td>
                    <td>${formatTraffic(traffic.uplink)}</td>
                    <td>${formatTraffic(traffic.downlink)}</td>
                    <td>${formatTraffic(total)}</td>
                `;
                inboundTableBody.appendChild(row);
            }
        }

        // 从服务器获取数据
        async function fetchData() {
            try {
                const response = await fetch('/api/traffic');
                if (!response.ok) {
                    throw new Error(`HTTP错误: ${response.status}`);
                }
                return await response.json();
            } catch (error) {
                console.error('获取数据失败:', error);
                throw error;
            }
        }

        // 刷新数据函数
        async function refreshData() {
            const refreshBtn = document.getElementById('refreshBtn');
            refreshBtn.disabled = true;
            refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 加载中...';
            
            try {
                const data = await fetchData();
                updateUI(data);
            } catch (error) {
                console.error('获取数据失败:', error);
                alert('获取数据失败，请检查控制台获取详细信息。');
            } finally {
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise"></i> 刷新数据';
            }
        }

        // 初始化页面
        document.addEventListener('DOMContentLoaded', function() {
            // 初始加载数据
            refreshData();
            
            // 设置刷新按钮事件
            document.getElementById('refreshBtn').addEventListener('click', refreshData);
            
            // 设置自动刷新
            let refreshInterval;
            const autoRefreshCheckbox = document.getElementById('autoRefresh');
            
            function setupAutoRefresh() {
                if (autoRefreshCheckbox.checked) {
                    refreshInterval = setInterval(refreshData, 10000); // 每10秒刷新一次
                } else {
                    clearInterval(refreshInterval);
                }
            }
            
            autoRefreshCheckbox.addEventListener('change', setupAutoRefresh);
            setupAutoRefresh();
            
            // 设置搜索功能
            function setupSearch(inputId, tableBodyId) {
                const searchInput = document.getElementById(inputId);
                searchInput.addEventListener('input', function() {
                    const searchText = this.value.toLowerCase();
                    const rows = document.querySelectorAll(`#${tableBodyId} tr`);
                    
                    rows.forEach(row => {
                        const name = row.cells[0].textContent.toLowerCase();
                        if (name.includes(searchText)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    });
                });
            }
            
            setupSearch('userSearch', 'userTableBody');
            setupSearch('outboundSearch', 'outboundTableBody');
            setupSearch('inboundSearch', 'inboundTableBody');
        });
    </script>
</body>
</html>
